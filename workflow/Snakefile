REFERENCE_FASTA_PATH = dict(
    CHM13="/home/miaocj/docker_dir/data/reference_genome/CHM13/chm13v2.0.fa.gz",
    rice="/home/miaocj/docker_dir/kNN-overlap-finder/data/reference/rice/IRGSP.fasta.gz",
)
REGIONS = dict(
    CHM13=dict(
        TRA=("chr14", 14819498, 17749884),
        HLA=("chr6", 28476949, 34231258),
        IGK=("chr2", 87866370, 91790947),
        IGH=("chr14", 98839469, 101161492),
        chr8_centro_6M=("chr8", 42_000_000, 48_000_000),
        chr5_centro_9M=("chr5", 44_000_000, 53_000_000),
        chr6_50M=("chr6", 0, 50_000_000),
        chr5_100M=("chr5", 0, 100_000_000),
        chr1_248M=("chr1", 0, 1_000_000_000),
        chr22_51M=("chr22", 0, 100_000_000),
        chr9_150M=("chr9", 0, 1_000_000_000),
        chr13_113M=("chr13", 0, 1_000_000_000),
        chr14_101M=("chr14", 0, 1_000_000_000),
        chr15_98M=("chr15", 0, 1_000_000_000),
        chr21_45M=("chr21", 0, 1_000_000_000)
    ),
    ara=dict(
        chr1_30M=("1", 0, 100_000_000),
    ),
    rice=dict(
        chr1_43M=("chr01", 0, 100_000_000),
    ),
    yeast=dict(
        chr4_1M=("ref|NC_001136|", 0, 2_000_000),
    ),
    hg002=dict(
        HLA=("chr6_MATERNAL", 28476949, 34231258),
        IGK=("chr2_MATERNAL", 87866370, 91790947),
        chr1_248M=("chr1_MATERNAL", 0, 1_000_000_000),
    ),
)

wildcard_constraints:
    length_kb=r"\d+",
    sample=r"\w+",
    region=r"\w+",
    platform=r"\w+",
    encoding=r"\w+",

##For simulated, generating reads
rule extract_regional_reference:
    input:
        fasta=lambda wildcards: REFERENCE_FASTA_PATH[wildcards["sample"]],
    output:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    params:
        region=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]],
    conda:
        "envs/default.yaml"
    script:
        "scripts/extract_regional_reference.smk.py"


rule simulate_perfect_sequencing_reads:
    input:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    output:
        fasta="data/regional_reads/{sample}/{region}/perfect_{length_kb}k/reads.fasta.gz",
    params:
        length_kb=lambda wildcards: int(wildcards["length_kb"]),
        depth=30,
        seed=3558929,
    wildcard_constraints:
        length_kb=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/simulate_perfect_sequencing_reads.smk.py"


rule run_pbsim3_ont:
    input:
        reference="data/regional_reference/{sample}/{region}/reference.fasta.gz",
        model="resources/pbsim/ERRHMM-ONT-HQ.model",
    output:
        folder=directory(
            "data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k_{depth}dep"
        ),
        fasta="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k_{depth}dep/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k_{depth}dep/alignment.maf.gz",
    wildcard_constraints:
        accuracy=r"\d+",
        length_kb=r"\d+",
        depth=r"\d+",
    params:
        accuracy=lambda wildcards: float(wildcards["accuracy"]) / 100,
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        length_sd=lambda wildcards: int(wildcards["length_kb"]) * 500,
        length_min=1000,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        gunzip -c {input.reference} \
        | pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {wildcards.depth} \
            --accuracy-mean {params.accuracy} \
            --length-mean {params.length_mean} \
            --length-sd  {params.length_sd} \
            --length-min {params.length_min} \
            --genome /dev/stdin \
            --seed {params.seed} \
            --prefix {output.folder}/output
        sed -n '1~4s/^@/>/p;2~4p' {output.folder}/output_0001.fastq | gzip -c > {output.fasta}
        gzip -c {output.folder}/output_0001.maf > {output.maf}
        rm -rf {output.folder}/output*
        """

rule run_pbsim3_meta_ont:
    input:
        reference="data/metagenome_reference/GCR.fa.split/GCR.part_{num}.fa",
        model="resources/pbsim/ERRHMM-ONT-HQ.model",
    output:
        folder=directory(
            "data/metagenome_reads/part{num}/pbsim_ONT_{accuracy}_{length_kb}k"
        ),
        fasta="data/metagenome_reads/part{num}/pbsim_ONT_{accuracy}_{length_kb}k/reads.fasta.gz",
        maf="data/metagenome_reads/part{num}/pbsim_ONT_{accuracy}_{length_kb}k/alignment.maf.gz",
    wildcard_constraints:
        accuracy=r"\d+",
        length_kb=r"\d+",
    params:
        accuracy=lambda wildcards: float(wildcards["accuracy"]) / 100,
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        length_sd=lambda wildcards: int(wildcards["length_kb"]) * 500,
        length_min=10_000,
        depth=10,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --accuracy-mean {params.accuracy} \
            --length-mean {params.length_mean} \
            --length-sd  {params.length_sd} \
            --length-min {params.length_min} \
            --genome {input.reference} \
            --seed {params.seed} \
            --prefix {output.folder}/output
       """

rule run_pbsim3_pb_hifi:
    input:
        reference="data/regional_reference/{sample}/{region}/reference.fasta.gz",
        model="resources/pbsim/ERRHMM-SEQUEL.model",
    output:
        folder=directory(
            "data/regional_reads/{sample}/{region}/pbsim_pb_hifi_{length_kb}k"
        ),
        fasta="data/regional_reads/{sample}/{region}/pbsim_pb_hifi_{length_kb}k/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/pbsim_pb_hifi_{length_kb}k/alignment.maf.gz",
    params:
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        pass_num=10,
        depth=20,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        gunzip -c {input.reference} \
        | pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --length-mean {params.length_mean} \
            --pass-num {params.pass_num} \
            --genome /dev/stdin \
            --seed {params.seed} \
            --prefix {output.folder}/output
        samtools sort -@ 10  {output.folder}/output_0001.sam -o  {output.folder}/output_0001.bam
        ccs  -j 10 {output.folder}/output_0001.bam  {output.folder}/output_hifi.fastq.gz
        gunzip -c {output.folder}/output_hifi.fastq.gz | sed -n '1~4s/^@/>/p;2~4p' | gzip -c > {output.fasta}
        gzip -c {output.folder}/output_0001.maf > {output.maf}
        rm -rf {output.folder}/output*
        """
###Get reads' location on the genome, save in read_info file.
rule get_perfect_read_info:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"perfect_.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_perfect_read_info.smk.py"


rule get_pbsim_ONT_metadata:
    input:
        maf="data/regional_reads/{sample}/{region}/{platform}/alignment.maf.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"pbsim_ONT.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_pbsim_read_info_ont.smk.py"

rule get_pbsim_pb_ccs_metadata:
    input:
        maf="data/regional_reads/{sample}/{region}/{platform}/alignment.maf.gz",
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"pbsim_pb.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_pbsim_read_info_hifi.smk.py"

# For real reads, get location on genome via minimap2.
# These reads have sampled to 30x depth.

rule map_real_reads_to_genome:
    input:
        reads="data/real_reads/{sample}/{platform}/all_reads.fq.gz",
        reference="data/reference/{sample}/reference.fasta",
    output:
        all_paf="data/real_reads/{sample}/{platform}/all_aligned.paf",
    conda:
        "envs/minimap2.yaml"
    wildcard_constraints:
        platform=r"real.+",
    threads: 128
    shell:
        """
        minimap2 -x map-ont {input.reference} {input.reads} --secondary=no --MD --eqx -I 10G -k 19 -w 5 -A 3 -B 2 -m 250 -t 60 > {output.all_paf}
        """

rule extract_regional_alignment:
    input:
        reads="data/real_reads/{sample}/{platform}/all_reads.fq.gz",
        all_paf="data/real_reads/{sample}/{platform}/all_aligned.paf",
    output:
        fasta_aligned="data/regional_reads/{sample}/{region}/{platform}/aligned_read.fa.gz",
        paf="data/regional_reads/{sample}/{region}/{platform}/alignment.paf",
    params:
        chromosome=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]][0],
        start=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]][1],
        end=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]][2],
    wildcard_constraints:
        platform=r"real.+",
        region=r"^(?!all$).*$",
    conda: "envs/default.yaml"
    shell:
        """
        awk '$6 == "{params.chromosome}" && $8 < {params.end} && $9 > {params.start}' {input.all_paf} > {output.paf}
        cut -f1 {output.paf} |sort  |uniq | seqkit grep -f - {input.reads} | seqkit fq2fa - | gzip > {output.fasta_aligned}
        """

rule extract_all_alignment:
    input:
        reads="data/real_reads/{sample}/{platform}/all_reads.fq.gz",
        all_paf="data/real_reads/{sample}/{platform}/all_aligned.paf",
    output:
        fasta_aligned="data/regional_reads/{sample}/all/{platform}/aligned_read.fa.gz",
    wildcard_constraints:
        platform=r"real.+",
    conda: "envs/default.yaml"
    shell:
        """
        cut -f1 {input.all_paf} |sort  |uniq | seqkit grep -f - {input.reads} | seqkit fq2fa - | gzip > {output.fasta_aligned}
        """

## Filter reads and save filtered reads in fasta file, finding reads' real location in genome and save it in tsv file.
rule paf_to_read_info:
    input:
        fasta_aligned="data/regional_reads/{sample}/{region}/{platform}/aligned_read.fa.gz",
        paf="data/regional_reads/{sample}/{region}/{platform}/alignment.paf",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
        stat="data/regional_reads/{sample}/{region}/{platform}/read_usage_statistic.tsv.gz",
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    wildcard_constraints:
        region=r"^(?!all$).*$",
        platform=r"real.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_real_read_info.smk.py"

rule paf_to_read_info_for_chrs:
    input:
        fasta_aligned="data/regional_reads/{sample}/all/{platform}/aligned_read.fa.gz",
        paf="data/real_reads/{sample}/{platform}/all_aligned.paf",
    output:
        tsv="data/regional_reads/{sample}/all/{platform}/read_info.tsv.gz",
        fasta="data/regional_reads/{sample}/all/{platform}/reads.fasta.gz",
    wildcard_constraints:
        platform=r"real.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_real_read_info_for_chrs.smk.py"

## Encode reads. This reads.fasta include fasta belong to this reigion, so this script fits for simulate and real reads.
rule kmer_encoding:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
        #paf="data/regional_reads/{sample}/{region}/{platform}/alignment.paf.gz",
    output:
        npz="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/feature_matrix.npz",
        json="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/read_features.json.gz",
        tsv="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/metadata.tsv.gz",
    params:
        sample_fraction=0.05,
        min_multiplicity=2,
        seed=562104830,
    wildcard_constraints:
        k=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/kmer_encoding_for_sim.smk.py"

rule minimizer_encoding:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    output:
        npz="data/feature_matrix/{sample}/{region}/{platform}/minimizer_k{k}_w{w}/feature_matrix.npz",
        json="data/feature_matrix/{sample}/{region}/{platform}/minimizer_k{k}_w{w}/read_features.json.gz",
        tsv="data/feature_matrix/{sample}/{region}/{platform}/minimizer_k{k}_w{w}/metadata.tsv.gz",
    params:
        min_multiplicity=2, ## 区别于kmer编码，指的是包含某kmer数量的reads数目小于2
        seed=562104830,
    wildcard_constraints:
        k=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/minimizer_encoding.smk.py"

rule generate_reference_graph:
    input:
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
    output:
        ref_graph="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/reference_graph.gpickle",
    conda:
        "envs/default.yaml"
    script:
        "scripts/generate_reference_graph.smk.py"

#--------------------up for real data--------------------------------------------------------

rule run_minimap2_ava:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        paf_minimap2="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
        minimap2_log="data/minimap2/{sample}/{region}/{platform}/minimap2.log",
    params:
        preset="ava-ont",
    conda:
        "envs/minimap2.yaml"
    threads: 64
    shell:
        """
        /usr/bin/time -v -o {output.minimap2_log} \
        minimap2 -x {params.preset} -t {threads} {input.fasta} {input.fasta}| gzip -c > {output.paf_minimap2}
        """

rule run_daligner:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        maf="data/daligner/{sample}/{region}/{platform}/alignment.maf.gz",
    params:
        k = 16,
        average_correlation=".9",
        min_alignment_length=1000,
        min_alignment_score=50,
    threads: 8
    conda:
        "envs/daligner.yaml"
    shell:
        """
        daligner \
            -k{params.k} \
            -e{params.average_correlation} \
            -l{params.min_alignment_length} \
            -s{params.min_alignment_score} \
            -T{threads} \
            -v \
            {input.fasta} {input.fasta} \
        | gzip -c > {output.maf}
        """

rule get_neighbors:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        paf_minimap2="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
    output:
        nbr_indice="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_nbr_matrix.npz",
        time="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_nn_time.json",
        log="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_time.log",
    threads: 1
    wildcard_constraints:
        method=r'[A-Za-z]+_[A-Za-z]+_[A-Za-z]+_(\d+d_)?(IDF|TF|TF-IDF|None)+',
    conda:
        "envs/evaluate.yaml"
    shell:
        """
        /usr/bin/time -v -o {output.log} \
        mprof run workflow/scripts/get_neighbors.smk.py --input {input.feature_matrix} {input.read_features} {input.metadata} {input.paf_minimap2} \
        --output {output.nbr_indice} {output.time} --method {wildcards.method}
        mprof plot -o {output.time}.png
        """

rule get_neighbors_params_tuning:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        paf_minimap2="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
        params="data/configs/{param_type}/{config}_parameter.json" 
    output:
        nbr_indice="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{param_type}_{config}/{method}_nbr_matrix.npz",
        time="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{param_type}_{config}/{method}_nn_time.json",
        log="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{param_type}_{config}/{method}_time.log",
    params:
        param_flag=lambda wc: "--ann-parameter" if wc.param_type == "ann" else "--dim-parameter"
    threads: 1 
    wildcard_constraints:
        method=r'[A-Za-z]+_[A-Za-z]+_[A-Za-z]+_(\d+d_)?(IDF|TF|TF-IDF|None)+',
        param_type=r'ann|dim'
    conda:
        "envs/evaluate.yaml"
    shell:
        """
        /usr/bin/time -v -o {output.log} \
        mprof run workflow/scripts/get_neighbors.smk.py \
            --input {input.feature_matrix} {input.read_features} {input.metadata} {input.paf_minimap2} \
            --output {output.nbr_indice} {output.time} \
            --method {wildcards.method} \
            {params.param_flag} {input.params}
        mprof plot -o {output.time}.png
        """


rule get_neighbors_diff_n_neighbors:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        paf_minimap2="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
    output:
        nbr_indice="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_n{n_neighbors}_nbr_matrix.npz",
        time="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_n{n_neighbors}_nn_time.json",
        log="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_n{n_neighbors}_time.log",
    threads: 1
    wildcard_constraints:
        method=r'[A-Za-z]+_[A-Za-z]+_[A-Za-z]+_(\d+d_)?(IDF|TF|TF-IDF|None)+',
    conda:
        "envs/evaluate.yaml"
    shell:
        """
        /usr/bin/time -v -o {output.log} \
        mprof run workflow/scripts/get_neighbors.smk.py --input {input.feature_matrix} {input.read_features} {input.metadata} {input.paf_minimap2} \
        --output {output.nbr_indice} {output.time} --method {wildcards.method} --n-neighbors {wildcards.n_neighbors}
        mprof plot -o {output.time}.png
        """

rule evaluate_configs:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        ref_graph="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/reference_graph.gpickle",
        nbr_indice="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_nbr_matrix.npz",
    output:
        neighbor_overlap_sizes="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_overlap_sizes.pkl",
    threads: 8
    wildcard_constraints:
        method=r'[^/]+',
    conda:
        "envs/evaluate.yaml"
    script:
        "scripts/evaluate_neighbors.smk.py" 

use rule evaluate_configs as evaluate_configs_params_tuning with:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        ref_graph="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/reference_graph.gpickle",
        nbr_indice="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{config}/{method}_nbr_matrix.npz",
    output:
        neighbor_overlap_sizes="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{config}/{method}_overlap_sizes.pkl",

rule get_stat:
    input:
        neighbor_overlap_sizes="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_overlap_sizes.pkl",
        log="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_time.log",
    output:
        stat="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_integral_stat.tsv",
        time_stat="data/{evaluation_threads}/{sample}/{region}/{platform}/{encoding}/{method}_time_rss.tsv",
    shell:
        """
        python /home/miaocj/docker_dir/kNN-overlap-finder/workflow/scripts/generate_evalutate.py {input.neighbor_overlap_sizes} {output.stat}
        python /home/miaocj/docker_dir/kNN-overlap-finder/workflow/scripts/generate_time_stat.py {input.log} {output.time_stat}
        """
        
# rule get_neighbors_meta:
#     input:
#         ref_tax="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/ref_read_tax.json.gz",
#         que_tax="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/que_read_tax.json.gz",
#         ref_feature_matrix="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/ref_feature_matrix.npz",
#         que_feature_matrix="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/que_feature_matrix.npz",
#     output:
#         nbr_indice="data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_nbr_matrix.npz",
#         stat="data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_stat.tsv",
#         time="data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_nn_time.json"
#     threads: 8
#     benchmark:
#         "data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_benchmark.csv"
#     conda:
#         "envs/evaluate.yaml"
#     script:
#         "scripts/metagenome_kNN.smk.py"

# ----------------------------------------------------------------------------------------------------

rule test_srp_params:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/kmer_k11/dim_SRP_{config}/NNDescent_Cosine_SparseRP_3000d_IDF_integral_stat.tsv",
        config=['default','config1','config2','config3'])

rule test_minimizer_small_region:
    input:
        expand("data/evaluation64/CHM13/{region}/real_cyclone/{encode}/Exact_Cosine_None_TF-IDF_integral_stat.tsv",
        encode=['minimizer_k11_w10','minimizer_k11_w20','minimizer_k11_w10'],
        region=['HLA','IGK','chr22_51M'])

rule test_minimizer_chr1:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/{encode}/NNDescent_Cosine_SparseRP_3000d_IDF_integral_stat.tsv",
        encode=['minimizer_k11_w10','minimizer_k11_w20','minimizer_k11_w10','minimizer_k15_w10'])

rule test_k:
    input:
        expand("data/evaluation64/CHM13/{region}/real_cyclone/kmer_k{k}/Exact_Cosine_None_TF-IDF_integral_stat.tsv",
        region=['chr1_248M'],
        k=[5,7,9,11,13,15,17])

rule test_n1:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/kmer_k16/NNDescent_Cosine_SparseRP_3000d_IDF_n{n_neighbors}_nn_time.json",
        n_neighbors=[2,4,6,8,10,14,16])


rule PQ_PT2:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/kmer_k16/{config}/PQ_Cosine_SparseRP_3000d_IDF_stat.tsv",
        config=['PQ_config1','PQ_config2','PQ_config3','PQ_config4','PQ_config5','PQ_default'])

rule HNSW_PT3:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/kmer_k16/{config}/HNSW_Cosine_SparseRP_3000d_IDF_nn_time.json",
        config=['HNSW_config1','HNSW_config2','HNSW_config3','HNSW_config4','HNSW_config5','HNSW_default'])

rule NNDesent_PT4:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/kmer_k16/{config}/NNDescent_Cosine_SparseRP_3000d_IDF_stat.tsv",
        config=['NNDesent_config1','NNDesent_config2','NNDesent_config3','NNDesent_config4','NNDesent_config5','NNDesent_default'])

rule IVFPQ_PT5:
    input:
        expand("data/evaluation64/CHM13/chr1_248M/real_cyclone/kmer_k16/{config}/IVFPQ_Cosine_SparseRP_3000d_IDF_nn_time.json",
        config=['IVFPQ_config1','IVFPQ_config2','IVFPQ_config3','IVFPQ_config4','IVFPQ_config5','IVFPQ_default'])

rule chrs_test:
    input:
        expand("data/evaluation64/CHM13/{chromosome}/real_cyclone/kmer_k11/NNDescent_Cosine_SparseRP_{dim}d_IDF_n6_integral_stat.tsv",
        chromosome=['chr9_150M','chr13_113M','chr14_101M','chr15_98M','chr21_45M','chr22_51M','chr1_248M'],
        dim=[500,1000,2000,3000,6000])

rule small_region:
    input:
        expand("data/evaluation/{region}/kmer_k16/Exact_Cosine_{dim}_500d_IDF_overlap_stat.tsv",
        region=['CHM13/IGK/real_cyclone','CHM13/HLA/real_cyclone',
        'CHM13/IGK/real_ONT','CHM13/HLA/real_ONT','yeast/chr4_1M/real_cyclone'],
        dim=['Spectural','GaussianRP','SparseRP','umap','PCA','scBiMap'])

rule small_region_ANN:
    input:
        expand("data/evaluation64/{region}/kmer_k16/{ann}_Cosine_SparseRP_2000d_IDF_nn_time.json",
        region=['CHM13/IGK/real_cyclone','CHM13/HLA/real_cyclone',
        'CHM13/IGK/real_ONT','CHM13/HLA/real_ONT'],
        ann=['HNSW','PQ','IVFPQ','NNDescent'])
rule large_region_ANN:
    input:
        expand("data/evaluation64/{region}/kmer_k16/{ann}_Cosine_SparseRP_2000d_IDF_nn_time.json",
        region=['CHM13/IGK/real_cyclone','CHM13/HLA/real_cyclone',
        'CHM13/IGK/real_ONT','CHM13/HLA/real_ONT'],
        ann=['HNSW','PQ','IVFPQ','NNDescent'])


rule HLA_dim:
    input:
        expand("data/evaluation/CHM13/HLA/real_cyclone/kmer_k16/Exact_Cosine_SparseRP_{dim}d_IDF_overlap_stat.tsv",
        dim=[100,300,500,1000,2000,3000,6000])

rule chr22_dims:
    input:
        expand("data/evaluation/{region}/kmer_k16/Exact_{distance}_{dim_method}RP_500d_IDF_overlap_stat.tsv",
        region=['CHM13/HLA/real_cyclone','CHM13/IGK/real_cyclone','CHM13/chr22_51M/real_cyclone',
            'CHM13/HLA/real_ONT','CHM13/IGK/real_ONT','CHM13/chr22_51M/real_ONT',
            'ara/chr1_30M/real_ONT','rice/chr1_43M/real_ONT_new'],
        distance=['Cosine','Euclidean'],
        dim_method=['Gaussian','Sparse'])


rule middle_region_hash:
    input:
        expand("data/evaluation/{region}/kmer_k16/{method}_IDF_overlap_stat.tsv",
        region=['CHM13/IGK/real_cyclone','CHM13/HLA/real_cyclone',
        'CHM13/IGK/real_ONT','CHM13/HLA/real_ONT',
        'ara/chr1_30M/real_ONT','rice/chr1_43M/real_ONT_new',
        'CHM13/chr22_51M/real_cyclone','CHM13/chr22_51M/real_ONT'],
        method=['SimHash_Hamming_None','MinHash_Jaccard_None'])


rule middle_region:
    input:
        expand("data/evaluation/{region}/kmer_k16/Exact_Cosine_{dim}_500d_IDF_overlap_stat.tsv",
        region=['ara/chr1_30M/real_ONT','rice/chr1_43M/real_ONT_new',
        'CHM13/chr22_51M/real_cyclone','CHM13/chr22_51M/real_ONT'],
        dim=['GaussianRP','SparseRP','umap'])


rule middle_region_ANN:
    input:
        expand("data/evaluation64/{region}/kmer_k16/{ann}_Cosine_SparseRP_3000d_IDF_nn_time.json",
        region=['ara/chr1_30M/real_ONT','rice/chr1_43M/real_ONT_new',
        'CHM13/chr22_51M/real_cyclone','CHM13/chr22_51M/real_ONT'],
        ann=['HNSW','PQ','IVFPQ','NNDescent'])


rule large_region:
    input:
        expand("data/evaluation/{region}/kmer_k16/Exact_Cosine_SparseRP_3000d_IDF_overlap_stat.tsv",
        region=['CHM13/chr1_248M/real_cyclone','CHM13/chr1_248M/real_ONT'])

rule chr22_minimap2:
    input:
        expand("data/evaluation/{region}/kmer_k16/Minimap2_overlap_stat.tsv",
        region=['CHM13/chr22_51M/real_cyclone','CHM13/chr22_51M/real_ONT'])

rule minimap2:
    input:
        expand("data/evaluation/CHM13/{chromosome}/real_cyclone/kmer_k16/Minimap2_overlap_sizes.pkl",
        chromosome=['chr9_150M','chr13_113M','chr14_101M','chr15_98M','chr21_45M','chr22_51M'])

rule chr1_test:
    input:
        "data/evaluation/CHM13/chr1_248M/real_cyclone/kmer_k16/HNSW_Cosine_SparseRP_6000d_IDF_overlap_sizes.pkl"

rule generate_simulate_data:
    input:
        expand("data/evaluation/{sample}/pbsim_ONT_{accuracy}_{length_kb}k_{depth}dep/kmer_k16/Exact_Cosine_None_{preprocess}_overlap_sizes.pkl",
        sample=['CHM13/IGK','rice/chr1_43M'],
        accuracy=['99','97','95','93','91'],
        length_kb=[10,15,20,25,30],
        depth=[10,30,50],
        preprocess=['TF-IDF'])

rule rpf_PT:
    input:
        expand("data/evaluation/CHM13/chr1_248M/real_cyclone/kmer_k16/RPForest_config{config}/RPForest_Cosine_SparseRP_3000d_IDF_overlap_sizes.pkl",
        config=[1,2,3])


rule minimap2_log:
    input:
        expand("data/minimap2/CHM13/{region}/real_cyclone/minimap2.log",
        region=['chr9_150M','chr13_113M','chr14_101M','chr15_98M','chr21_45M','chr22_51M']
        )

rule simulate:
    input:
        expand("data/evaluation/{region}/pbsim_ONT_{accu}_{length}k/kmer_k16/Exact_Cosine_None_{preprocess}_overlap_sizes.pkl",
        region=['CHM13/HLA','rice/chr1_43M'],
        accu=['99','97','95','93','91'],
        length=[10,15,20,25,30],
        preprocess=['TF-IDF']
        )

rule test_rpforest:
    input:
        expand("data/evaluation/CHM13/IGK/real_cyclone/kmer_k16/RPForest_config{num}_overlap_stat.tsv",
        num=['1','2','3','4','5','6','7','8','9','10'])
