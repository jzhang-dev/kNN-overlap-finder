REFERENCE_FASTA_PATH = dict(
    HG002="data/reference/HG002/hg002v1.0.1.fasta.gz",
    CHM13="data/reference/CHM13/chm13v2.0.fa.gz",
)
REGIONS = dict(
    TRA=("chr14", 14819498, 17749884),
    HLA=("chr6", 28476949, 34231258),
    IGK=("chr2", 87866370, 91790947),
    IGH=("chr14", 98839469, 101161492),
    chr6_50M=("chr6", 0, 50_000_000),
    chr1_248M=("chr1", 0, 1_000_000_000)
)


wildcard_constraints:
    length_kb=r"\d+",
    sample=r"\w+",
    region=r"\w+",
    platform=r"\w+",
    encoding=r"\w+",


rule extract_regional_reference:
    input:
        fasta=lambda wildcards: REFERENCE_FASTA_PATH[wildcards["sample"]],
    output:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    params:
        region=lambda wildcards: REGIONS[wildcards["region"]],
    conda:
        "envs/default.yaml"
    script:
        "scripts/extract_regional_reference.smk.py"


rule simulate_perfect_sequencing_reads:
    input:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    output:
        fasta="data/regional_reads/{sample}/{region}/perfect_{length_kb}k/reads.fasta.gz",
    params:
        length_kb=lambda wildcards: int(wildcards["length_kb"]),
        depth=30,
        seed=3558929,
    wildcard_constraints:
        length_kb=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/simulate_perfect_sequencing_reads.smk.py"


rule run_pbsim3:
    input:
        reference="data/regional_reference/{sample}/{region}/reference.fasta.gz",
        model="resources/pbsim/ERRHMM-ONT-HQ.model",
    output:
        folder=directory(
            "data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k"
        ),
        fasta="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k/alignment.maf.gz",
    wildcard_constraints:
        accuracy=r"\d+",
        length_kb=r"\d+",
    params:
        accuracy=lambda wildcards: float(wildcards["accuracy"]) / 100,
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        length_sd=lambda wildcards: int(wildcards["length_kb"]) * 500,
        length_min=10_000,
        depth=20,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        gunzip -c {input.reference} \
        | pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --accuracy-mean {params.accuracy} \
            --length-mean {params.length_mean} \
            --length-sd  {params.length_sd} \
            --length-min {params.length_min} \
            --genome /dev/stdin \
            --seed {params.seed} \
            --prefix {output.folder}/output
        sed -n '1~4s/^@/>/p;2~4p' {output.folder}/output_0001.fastq | gzip -c > {output.fasta}
        gzip -c {output.folder}/output_0001.maf > {output.maf}
        rm -rf {output.folder}/output*
        """


rule get_perfect_read_info:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"perfect_.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_perfect_read_info.smk.py"


rule get_pbsim_metadata:
    input:
        #fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/{platform}/alignment.maf.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"pbsim_.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_pbsim_read_info.smk.py"


rule kmer_encoding:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    output:
        npz="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/feature_matrix.npz",
        json="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/read_features.json.gz",
        tsv="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/metadata.tsv.gz",
    params:
        sample_fraction=0.05,
        min_multiplicity=2,
        seed=562104830,
    wildcard_constraints:
        k=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/kmer_encoding.smk.py"


rule run_minimap2_ava:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        paf="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
    params:
        preset="ava-ont",
    conda:
        "envs/minimap2.yaml"
    threads: 8
    shell:
        """
        minimap2 -x {params.preset} -t {threads} {input.fasta} {input.fasta} | gzip -c > {output.paf}
        """


rule run_daligner:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        maf="data/daligner/{sample}/{region}/{platform}/alignment.maf.gz",
    
    params:
        k = 16,
        average_correlation=".9",
        min_alignment_length=1000,
        min_alignment_score=50,
    threads: 8
    conda:
        "envs/daligner.yaml"
    shell:
        """
        daligner \
          -k{params.k} \
          -e{params.average_correlation} \
          -l{params.min_alignment_length} \
          -s{params.min_alignment_score} \
          -T{threads} \
          -v \
          {input.fasta} {input.fasta} \
        | gzip -c > {output.maf}
        """
    


rule evaluate_configs:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        paf="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
    output:
        folder=directory("data/evaluation/{sample}/{region}/{platform}/{encoding}/"),
    log:
        notebook="data/evaluation/{sample}/{region}/{platform}/{encoding}/evaluate_configs.py.ipynb",
    threads: 8
    conda:
        "envs/evaluate.yaml"
    notebook:
        "notebooks/evaluate_configs.smk.py.ipynb"


# ----------------------------------------------------------------------------------------------------


rule test1:
    input:
        "data/regional_reads/CHM13/TRA/perfect_10k/reads.fasta.gz",


rule test2:
    input:
        "data/feature_matrix/kmer/CHM13/TRA/perfect_50k/read_features.json.gz",
        "data/feature_matrix/kmer/CHM13/TRA/perfect_50k/metadata.tsv.gz",


rule test3:
    input:
        "data/regional_reads/CHM13/TRA/pbsim_ONT_95_30k/reads.fasta.gz",
        "data/feature_matrix/kmer/CHM13/TRA/pbsim_ONT_95_30k/read_features.json.gz",
        "data/feature_matrix/kmer/CHM13/TRA/pbsim_ONT_95_30k/metadata.tsv.gz",


rule test4:
    input:
        "data/feature_matrix/kmer/CHM13/HLA/pbsim_ONT_93_30k/read_features.json.gz",


rule test5:
    input:
        "data/minimap2/CHM13/HLA/pbsim_ONT_93_30k/alignment.gaf.gz",
        "data/feature_matrix/kmer/CHM13/HLA/pbsim_ONT_93_30k/read_features.json.gz",


rule test6:
    input:
        expand("data/evaluation/CHM13/{region}/pbsim_ONT_93_30k/kmer_k{k}/", 
        region=("HLA", "TRA", "IGK", "IGH"), k=[16])
 
rule test7:
    input:
        expand("data/evaluation/CHM13/{region}/pbsim_ONT_93_30k/kmer_k{k}/", 
        region=["chr6_50M"], k=[16])


rule test8:
    input:
        expand("data/daligner/CHM13/{region}/pbsim_ONT_93_30k/alignment.maf.gz",
        region=["chr6_50M"], k=[16])