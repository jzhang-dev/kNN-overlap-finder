REFERENCE_FASTA_PATH = dict(
    CHM13="/home/miaocj/docker_dir/data/reference_genome/CHM13/chm13v2.0.fa.gz",
)
REGIONS = dict(
    CHM13=dict(
        TRA=("chr14", 14819498, 17749884),
        HLA=("chr6_MATERNAL", 28476949, 34231258),
        IGK=("chr2", 87866370, 91790947),
        IGH=("chr14", 98839469, 101161492),
        chr8_centro_6M=("chr8", 42_000_000, 48_000_000),
        chr5_centro_9M=("chr5", 44_000_000, 53_000_000),
        chr6_50M=("chr6", 0, 50_000_000),
        chr5_100M=("chr5", 0, 100_000_000),
        chr1_248M=("chr1_MATERNAL", 0, 1_000_000_000),
    ),
    Ara=dict(
        TRA=("chr14", 14819498, 17749884),
    ),
    rice=dict(
        TRA=("chr14", 14819498, 17749884),
    ),
    yeast=dict(
        TRA=("chr14", 14819498, 17749884),
    ),
)

wildcard_constraints:
    length_kb=r"\d+",
    sample=r"\w+",
    region=r"\w+",
    platform=r"\w+",
    encoding=r"\w+",

##For simulated, generating reads
rule extract_regional_reference:
    input:
        fasta=lambda wildcards: REFERENCE_FASTA_PATH[wildcards["sample"]],
    output:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    params:
        region=lambda wildcards: REGIONS[wildcards["region"]],
    conda:
        "envs/default.yaml"
    script:
        "scripts/extract_regional_reference.smk.py"


rule simulate_perfect_sequencing_reads:
    input:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    output:
        fasta="data/regional_reads/{sample}/{region}/perfect_{length_kb}k/reads.fasta.gz",
    params:
        length_kb=lambda wildcards: int(wildcards["length_kb"]),
        depth=30,
        seed=3558929,
    wildcard_constraints:
        length_kb=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/simulate_perfect_sequencing_reads.smk.py"


rule run_pbsim3_ont:
    input:
        reference="data/regional_reference/{sample}/{region}/reference.fasta.gz",
        model="resources/pbsim/ERRHMM-ONT-HQ.model",
    output:
        folder=directory(
            "data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k"
        ),
        fasta="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k/alignment.maf.gz",
    wildcard_constraints:
        accuracy=r"\d+",
        length_kb=r"\d+",
    params:
        accuracy=lambda wildcards: float(wildcards["accuracy"]) / 100,
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        length_sd=lambda wildcards: int(wildcards["length_kb"]) * 500,
        length_min=10_000,
        depth=20,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        gunzip -c {input.reference} \
        | pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --accuracy-mean {params.accuracy} \
            --length-mean {params.length_mean} \
            --length-sd  {params.length_sd} \
            --length-min {params.length_min} \
            --genome /dev/stdin \
            --seed {params.seed} \
            --prefix {output.folder}/output
        sed -n '1~4s/^@/>/p;2~4p' {output.folder}/output_0001.fastq | gzip -c > {output.fasta}
        gzip -c {output.folder}/output_0001.maf > {output.maf}
        rm -rf {output.folder}/output*
        """

rule run_pbsim3_meta_ont:
    input:
        reference="data/metagenome_reference/GCR.fa.split/GCR.part_{num}.fa",
        model="resources/pbsim/ERRHMM-ONT-HQ.model",
    output:
        folder=directory(
            "data/metagenome_reads/part{num}/pbsim_ONT_{accuracy}_{length_kb}k"
        ),
        fasta="data/metagenome_reads/part{num}/pbsim_ONT_{accuracy}_{length_kb}k/reads.fasta.gz",
        maf="data/metagenome_reads/part{num}/pbsim_ONT_{accuracy}_{length_kb}k/alignment.maf.gz",
    wildcard_constraints:
        accuracy=r"\d+",
        length_kb=r"\d+",
    params:
        accuracy=lambda wildcards: float(wildcards["accuracy"]) / 100,
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        length_sd=lambda wildcards: int(wildcards["length_kb"]) * 500,
        length_min=10_000,
        depth=10,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --accuracy-mean {params.accuracy} \
            --length-mean {params.length_mean} \
            --length-sd  {params.length_sd} \
            --length-min {params.length_min} \
            --genome {input.reference} \
            --seed {params.seed} \
            --prefix {output.folder}/output
       """

rule run_pbsim3_pb_hifi:
    input:
        reference="data/regional_reference/{sample}/{region}/reference.fasta.gz",
        model="resources/pbsim/ERRHMM-SEQUEL.model",
    output:
        folder=directory(
            "data/regional_reads/{sample}/{region}/pbsim_pb_hifi_{length_kb}k"
        ),
        fasta="data/regional_reads/{sample}/{region}/pbsim_pb_hifi_{length_kb}k/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/pbsim_pb_hifi_{length_kb}k/alignment.maf.gz",
    params:
        length_mean=lambda wildcards: int(wildcards["length_kb"]) * 1000,
        pass_num=10,
        depth=20,
        seed=5023967,
    conda:
        "envs/pbsim.yaml"
    shell:
        """
        gunzip -c {input.reference} \
        | pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --length-mean {params.length_mean} \
            --pass-num {params.pass_num} \
            --genome /dev/stdin \
            --seed {params.seed} \
            --prefix {output.folder}/output
        samtools sort -@ 10  {output.folder}/output_0001.sam -o  {output.folder}/output_0001.bam
        ccs  -j 10 {output.folder}/output_0001.bam  {output.folder}/output_hifi.fastq.gz
        gunzip -c {output.folder}/output_hifi.fastq.gz | sed -n '1~4s/^@/>/p;2~4p' | gzip -c > {output.fasta}
        gzip -c {output.folder}/output_0001.maf > {output.maf}
        rm -rf {output.folder}/output*
        """
###Get reads' location on the genome, save in read_info file.
rule get_perfect_read_info:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"perfect_.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_perfect_read_info.smk.py"


rule get_pbsim_ONT_metadata:
    input:
        maf="data/regional_reads/{sample}/{region}/{platform}/alignment.maf.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"pbsim_ONT.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_pbsim_read_info_ont.smk.py"

rule get_pbsim_pb_ccs_metadata:
    input:
        maf="data/regional_reads/{sample}/{region}/{platform}/alignment.maf.gz",
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"pbsim_pb.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/get_pbsim_read_info_hifi.smk.py"

## Kmer encoding for simulated reads.
rule kmer_encoding_for_sim:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    output:
        npz="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/feature_matrix.npz",
        json="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/read_features.json.gz",
        tsv="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/metadata.tsv.gz",
    params:
        sample_fraction=0.05,
        min_multiplicity=2,
        seed=562104830,
    wildcard_constraints:
        k=r"\d+",
        platform=r"pbsim_.+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/kmer_encoding_for_sim.smk.py"

# For real reads, get location on genome via minimap2.
# These reads have sampled to 30x depth.
rule map_real_reads_to_genome:
    input:
        reads="data/real_reads/{sample}/{platform}/all_reads.fq.gz",
        reference="data/reference/{sample}/reference.fasta",
    output:
        bam="data/real_reads/{sample}/{platform}/all_reads.bam",
        bai="data/real_reads/{sample}/{platform}/all_reads.bai",
        log="data/real_reads/{sample}/{platform}/minimap2.log",
    conda:
        "envs/minimap2.yaml"
    wildcard_constraints:
        platform=r"real.+",
    threads: 128
    shell:
            """
            /usr/bin/time -v -o {output.log} \
            minimap2 -ax map-ont {input.reference} {input.reads} --secondary=no --MD \
            --eqx -I 10G -k 19 -w 5 -A 3 -B 2 -m 250 -t {threads} \
            | samtools sort -m 6G -o {output.bam}
            samtools index {output.bam}
            """

## Filter reads and save filtered reads in fasta file, finding reads' real location in genome and save it in tsv file.
rule extract_alignment_info:
    input:
        bam="data/real_reads/{sample}/{platform}/all_reads.bam",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    params:
        chromosome=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]][0],
        start=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]][1],
        end=lambda wildcards: REGIONS[wildcards["sample"]][wildcards["region"]][2],
    wildcard_constraints:
        platform=r"real.+",
    conda: "envs/default.yaml"
    script: "scripts/extract_alignment_info.smk.py"


## Encode reads. This reads.fasta include fasta belong to this reigion, so this script fits for simulate and real reads.
rule kmer_encoding:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    output:
        npz="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/feature_matrix.npz",
        json="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/read_features.json.gz",
        tsv="data/feature_matrix/{sample}/{region}/{platform}/kmer_k{k}/metadata.tsv.gz",
    params:
        sample_fraction=0.05,
        min_multiplicity=2,
        seed=562104830,
    wildcard_constraints:
        k=r"\d+",
    conda:
        "envs/default.yaml"
    script:
        "scripts/kmer_encoding_for_sim.smk.py"

#--------------------up for real data--------------------------------------------------------

rule run_minimap2_ava:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        paf_minimap2="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
    params:
        preset="ava-ont",
    benchmark:
        "data/evaluation/minimap2/{sample}/{region}/{platform}/minimap2_benchmark.csv"
    conda:
        "envs/minimap2.yaml"
    threads: 120
    shell:
        """
        minimap2 -x {params.preset} -t {threads} {input.fasta} {input.fasta}| gzip -c > {output.paf_minimap2}
        """

rule run_daligner:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        maf="data/daligner/{sample}/{region}/{platform}/alignment.maf.gz",
    params:
        k = 16,
        average_correlation=".9",
        min_alignment_length=1000,
        min_alignment_score=50,
    threads: 8
    conda:
        "envs/daligner.yaml"
    shell:
        """
        daligner \
            -k{params.k} \
            -e{params.average_correlation} \
            -l{params.min_alignment_length} \
            -s{params.min_alignment_score} \
            -T{threads} \
            -v \
            {input.fasta} {input.fasta} \
        | gzip -c > {output.maf}
        """

rule get_neighbors:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        paf_minimap2="data/minimap2/{sample}/{region}/{platform}/alignment.paf.gz",
        #paf_blend="data/blend/{sample}/{region}/{platform}/alignment.paf.gz",
    output:
        nbr_indice="data/evaluation/{sample}/{region}/{platform}/{encoding}/{method}_nbr_matrix.npz",
        time="data/evaluation/{sample}/{region}/{platform}/{encoding}/{method}_nn_time.tsv",
        log="data/evaluation/{sample}/{region}/{platform}/{encoding}/{method}_time.log"
    benchmark:
        "data/evaluation/{sample}/{region}/{platform}/{encoding}/{method}_benchmark.csv"
    threads: 1
    conda:
        "envs/evaluate.yaml"
    shell:
        """
        /usr/bin/time -v -o {output.log} \
        python scripts/get_neighbors.smk.py {output.time} {input.paf_minimap2} {input.feature_matrix} \
        {input.metadata} {input.read_features} {output.nbr_indice} {wildcards.method}
        """


rule evaluate_configs:
    input:
        feature_matrix="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/feature_matrix.npz",
        read_features="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/read_features.json.gz",
        metadata="data/feature_matrix/{sample}/{region}/{platform}/{encoding}/metadata.tsv.gz",
        nbr_indice="data/evaluation/{sample}/{region}/{platform}/{encoding}/{method}_nbr_matrix.npz",
    output:
        overlap="data/evaluation/{sample}/{region}/{platform}/{encoding}/{method}_overlap_stat.tsv",
    threads: 8
    conda:
        "envs/evaluate.yaml"
    script:
        "scripts/evaluate_neighbors.smk.py" 

rule get_neighbors_meta:
    input:
        ref_tax="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/ref_read_tax.json.gz",
        que_tax="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/que_read_tax.json.gz",
        ref_feature_matrix="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/ref_feature_matrix.npz",
        que_feature_matrix="data/feature_matrix/metagenome/{data_type}/{platform}/{encoding}/que_feature_matrix.npz",
    output:
        nbr_indice="data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_nbr_matrix.npz",
        stat="data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_stat.tsv",
        time="data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_nn_time.tsv"
    threads: 8
    benchmark:
        "data/evaluation/metagenome/{data_type}/{platform}/{encoding}/{method}_benchmark.csv"
    conda:
        "envs/evaluate.yaml"
    script:
        "scripts/metagenome_kNN.smk.py"

# ----------------------------------------------------------------------------------------------------

rule meta1:
    input:
        expand("data/evaluation/metagenome/GCR_part001/pbsim_ONT_95_20k/kmer_16/{method}_stat.tsv",
        method=['SimHash_Hamming_None_IDF','HNSW_Cosine_GaussianRP_500d_IDF'])

rule real_data_test6:
    input:
        expand("data/evaluation/CHM13/{region}/{platform}/kmer_k16/{method}_None_overlap_stat.tsv",
        region=['IGK','HLA','chr1'],
        platform=['cyclone','ONT_R9'],
        method=['Exact_Cosine_None','HNSW_Euclidean_GaussianRP_500d','SimHash_Hamming_None','MinHash_Jaccard_None',
        'HNSW_Cosine_GaussianRP_500d','HNSW_Cosine_SparseRP_500d','HNSW_Euclidean_SparseRP_500d'])

rule real_data_test:
    input:
        expand("data/evaluation/human/{region}/{platform}/kmer_k16/{method}_IDF_overlap_stat.tsv",
        region=['IGK','HLA','chr22'],
        platform=['cyclone','ONT_R9'],
        method=['Exact_Cosine_None','HNSW_Euclidean_GaussianRP_500d','SimHash_Hamming_None','MinHash_Jaccard_None',
        'HNSW_Cosine_GaussianRP_500d','HNSW_Cosine_SparseRP_500d','HNSW_Euclidean_SparseRP_500d'])

rule real_data_test1:
    input:
        expand("data/evaluation/human/{region}/cyclone/kmer_k16/{method}_IDF_overlap_stat.tsv",
        region=['IGK'],
        method=['Exact_Cosine_None','HNSW_Euclidean_GuassianRP_500d','SimHash_Hamming_None','MinHash_Jaccard_None'])
rule real_data_test3:
    input:
        expand("data/evaluation/human/{region}/ONT_R9/kmer_k16/{method}_overlap_stat.tsv",
        region=['IGK','HLA','chr22'],
        method=['Minimap2'])

rule real_data_test2:
    input:
        expand("data/evaluation/human/chr1/cyclone/kmer_k16/{method}_IDF_overlap_stat.tsv",
        method=['HNSW_Euclidean_GaussianRP_500d','HNSW_Cosine_SparseRP_500d','HNSW_Euclidean_SparseRP_500d','HNSW_Cosine_GaussianRP_500d'])

rule article_test:
    input:
        expand("data/evaluation/CHM13/{region}/{platform}/kmer_k16/{demethod}_{distance}_{dimension}_{preprocess}_overlap_stat.tsv",
        region=['IGK','HLA','chr1_248M'],
        platform=['real_ONT_R9'],
        demethod=['Exact'], 
        distance=['Cosine','Euclidean'],
        dimension=['None'],
        preprocess=['IDF','TF','TF-IDF','None'])
 
rule article_test2:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{demethod}_{distance}_{dimension}_{preprocess}_overlap_stat.tsv",
        region=['CHM13/HLA','yeast/chr10','TAIR/chr3'],
        platform=['pbsim_ONT_93_30k','pbsim_ONT_95_20k','pbsim_ONT_98_10k','pbsim_ONT_93_20k','pbsim_ONT_93_10k',
        'pbsim_ONT_95_30k','pbsim_ONT_95_10k','pbsim_ONT_98_20k','pbsim_ONT_98_30k'],
        demethod=['Exact',],
        distance=['Cosine','Euclidean'],
        dimension=['None'],
        preprocess=['IDF','TF','TF-IDF','None'])


rule article_test3:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{demethod}_{distance}_{dimension}_{preprocess}_overlap_stat.tsv",
        region=['CHM13/HLA','yeast/chr10'],
        platform=['pbsim_ONT_93_30k'],
        demethod=['HNSW'],
        distance=['Cosine','Euclidean'],
        dimension=['Spectural_500d','GaussianRP_500d','SparseRP_500d','umap_500d','PCA_500d','scBiMap_500d'],
        preprocess=['IDF'])

rule article_test6:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{demethod}_{distance}_{dimension}_{preprocess}_overlap_stat.tsv",
        region=['CHM13/HLA','yeast/chr10','TAIR/chr3'],
        platform=['pbsim_ONT_93_30k'],
        demethod=['HNSW','PQ','NNDescent','Exact'],
        distance=['Euclidean'],
        dimension=['GaussianRP_500d'],
        preprocess=['IDF'])

rule article_test7:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{demethod}_None_IDF_overlap_stat.tsv",
        region=['CHM13/HLA','yeast/chr10','TAIR/chr3','CHM13/IGK'],
        platform=['pbsim_ONT_93_30k'],
        demethod=['MinHash_Jaccard','SimHash_Hamming'])

rule article_test8:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{demethod}_None_IDF_overlap_stat.tsv",
        region=['CHM13/HLA','CHM13/IGK','yeast/chr10'],
        platform=['pbsim_ONT_93_30k'],
        demethod=['HNSW_Cosine','HNSW_Euclidean'])


rule article_test4:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{method}_{preprocess}_overlap_stat.tsv",
        region=['CHM13/IGK','CHM13/HLA','yeast/chr10','TAIR/chr3'],
        platform=['pbsim_ONT_93_30k','pbsim_ONT_95_20k','pbsim_ONT_98_10k','pbsim_ONT_93_20k','pbsim_ONT_93_10k',
        'pbsim_ONT_95_30k','pbsim_ONT_95_10k','pbsim_ONT_98_20k','pbsim_ONT_98_30k'],
        method=['Exact_Cosine_None','Exact_Euclidean_None','WeightedMinHash_Jaccard_None'],
        preprocess=['IDF','TF','TF-IDF','None'])

rule article_test5:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{method}_overlap_stat.tsv",
        region=['CHM13/IGK','CHM13/HLA','yeast/chr10','TAIR/chr3'],
        platform=['pbsim_ONT_93_30k','pbsim_ONT_95_20k','pbsim_pb_hifi_10k','pbsim_ONT_93_20k','pbsim_ONT_93_10k',
        'pbsim_ONT_95_30k','pbsim_ONT_95_10k','pbsim_ONT_98_20k','pbsim_ONT_98_30k'],
        method=['Minimap2'])
 
rule article_test_dimension:
    input:
        expand("data/evaluation/{region}/{platform}/kmer_k16/{method}_overlap_stat.tsv",
        region=['CHM13/IGK','CHM13/HLA','yeast/chr10','TAIR/chr3'],
        platform=['pbsim_ONT_93_30k','pbsim_ONT_95_20k','pbsim_pb_hifi_10k'],
        method=[
            'Exact_Euclidean_None_IDF','Exact_Cosine_None_IDF','WeightedMinHash_Jaccard_None_IDF','Minimap2'
        ])
rule article_tair:
    input:
        expand("data/evaluation/TAIR/chr3/kmer_k16/{method}_overlap_stat.tsv",
        platform=['pbsim_ONT_93_30k','pbsim_ONT_95_20k','pbsim_pb_hifi_10k'],
        method=[
            'WeightedMinHash_Jaccard_None_TF',
            'WeightedMinHash_Jaccard_None_IDF',
            'WeightedMinHash_Jaccard_None_TF-IDF ',
            'MinHash_Jaccard_None_None',
            'Exact_Euclidean_None_None',
            'Exact_Euclidean_None_TF',
            'Exact_Euclidean_None_IDF',
            'Exact_Euclidean_None_TF-IDF',
            'Exact_Cosine_None_None',
            'Exact_Cosine_None_TF',
            'Exact_Cosine_None_IDF',
            'Exact_Cosine_None_TF-IDF',
            'Minimap2',
            'HNSW_Cosine_Spectural_500d_None',
            'HNSW_Cosine_Spectural_500d_TF',
            'HNSW_Cosine_Spectural_500d_IDF',
            'HNSW_Cosine_Spectural_500d_TF-IDF',
            'HNSW_Euclidean_Spectural_500d_None',
            'HNSW_Euclidean_Spectural_500d_TF',
            'HNSW_Euclidean_Spectural_500d_IDF',
            'HNSW_Euclidean_Spectural_500d_TF-IDF',
            'HNSW_Euclidean_GaussianRP_500d_None',
            'HNSW_Euclidean_GaussianRP_500d_TF',
            'HNSW_Euclidean_GaussianRP_500d_IDF',
            'HNSW_Euclidean_GaussianRP_500d_TF-IDF',
            'HNSW_Euclidean_SparseRP_500d_None',
            'HNSW_Euclidean_SparseRP_500d_TF',
            'HNSW_Euclidean_SparseRP_500d_TF-IDF',
            'HNSW_Euclidean_SparseRP_500d_IDF',
            'HNSW_Cosine_GaussianRP_500d_None',
            'HNSW_Cosine_GaussianRP_500d_TF',
            'HNSW_Cosine_GaussianRP_500d_IDF',
            'HNSW_Cosine_GaussianRP_500d_TF-IDF',
            'HNSW_Cosine_SparseRP_500d_None',
            'HNSW_Cosine_SparseRP_500d_TF',
            'HNSW_Cosine_SparseRP_500d_TF-IDF',
            'HNSW_Cosine_SparseRP_500d_IDF',
        ])
