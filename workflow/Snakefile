REFERENCE_FASTA_PATH = dict(HG002="data/reference/HG002/hg002v1.0.1.fasta.gz",
                            CHM13="data/reference/CHM13/chm13v2.0.fa.gz")
REGIONS = dict(TRA=("chr14", 14819498, 17749884))


wildcard_constraints:
    length_kb=r"\d+"

rule extract_regional_reference:
    input:
        fasta=lambda wildcards: REFERENCE_FASTA_PATH[wildcards['sample']],
    output:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    params:
        region=lambda wildcards: REGIONS[wildcards['region']]
    conda: 'envs/default.yaml'
    script: "scripts/extract_regional_reference.smk.py"




rule simulate_perfect_sequencing_reads:
    input:
        fasta="data/regional_reference/{sample}/{region}/reference.fasta.gz",
    output:
        fasta="data/regional_reads/{sample}/{region}/perfect_{length_kb}k/reads.fasta.gz",
    params:
        length_kb=lambda wildcards: int(wildcards['length_kb']),
        depth=30,
        seed=3558929
    wildcard_constraints:
        length_kb=r"\d+",
    conda: 'envs/default.yaml'
    script: "scripts/simulate_perfect_sequencing_reads.smk.py"
    


rule run_pbsim3:
    input:
        reference="data/regional_reference/{sample}/{region}/reference.fasta.gz",
        model="resources/pbsim/ERRHMM-ONT-HQ.model",
    output:
        folder=directory("data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k"),
        fasta="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/pbsim_ONT_{accuracy}_{length_kb}k/alignment.maf.gz",
    wildcard_constraints:
        accuracy=r"\d+",
        length_kb=r"\d+",
    params:
        accuracy=lambda wildcards: float(wildcards['accuracy']) / 100,
        length_mean=lambda wildcards: int(wildcards['length_kb']) * 1000,
        length_sd=lambda wildcards: int(wildcards['length_kb']) * 500,
        depth=30,
        seed=5023967
    conda: "envs/pbsim.yaml"
    shell:
        """
        gunzip -c {input.reference} \
        | pbsim \
            --strategy wgs \
            --method errhmm \
            --errhmm {input.model} \
            --depth {params.depth} \
            --accuracy-mean {params.accuracy} \
            --length-mean {params.length_mean} \
            --length-sd  {params.length_sd} \
            --genome /dev/stdin \
            --seed {params.seed} \
            --prefix {output.folder}/output
        sed -n '1~4s/^@/>/p;2~4p' {output.folder}/output_0001.fastq | gzip -c > {output.fasta}
        gzip -c {output.folder}/output_0001.maf > {output.maf}
        rm -rf {output.folder}/output*
        """




rule get_perfect_read_info:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"perfect_.+"
    conda: 'envs/default.yaml'
    script: "scripts/get_perfect_read_info.smk.py"


rule get_pbsim_metadata:
    input:
        #fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        maf="data/regional_reads/{sample}/{region}/{platform}/alignment.maf.gz",
    output:
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    wildcard_constraints:
        platform=r"pbsim_.+"
    conda: 'envs/default.yaml'
    script: "scripts/get_pbsim_read_info.smk.py"


rule kmer_encoding:
    input:
        fasta="data/regional_reads/{sample}/{region}/{platform}/reads.fasta.gz",
        tsv="data/regional_reads/{sample}/{region}/{platform}/read_info.tsv.gz",
    output:
        npz="data/feature_matrix/kmer/{sample}/{region}/{platform}/feature_matrix.npz",
        json="data/feature_matrix/kmer/{sample}/{region}/{platform}/read_features.json.gz",
        tsv="data/feature_matrix/kmer/{sample}/{region}/{platform}/metadata.tsv.gz",
    params:
        k = 10,
        sample_fraction=0.05,
        seed=562104830
    conda: 'envs/default.yaml'
    script: "scripts/kmer_encoding.smk.py"




# ----------------------------------------------------------------------------------------------------

rule test1:
    input:
        "data/regional_reads/CHM13/TRA/perfect_10k/reads.fasta.gz"


rule test2:
    input:
        "data/feature_matrix/kmer/CHM13/TRA/perfect_50k/read_features.json.gz",
        "data/feature_matrix/kmer/CHM13/TRA/perfect_50k/metadata.tsv.gz",


rule test3:
    input:
        "data/regional_reads/CHM13/TRA/pbsim_ONT_95_30k/reads.fasta.gz",
        "data/feature_matrix/kmer/CHM13/TRA/pbsim_ONT_95_30k/read_features.json.gz",
        "data/feature_matrix/kmer/CHM13/TRA/pbsim_ONT_95_30k/metadata.tsv.gz",
